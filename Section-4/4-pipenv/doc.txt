Pipenv is a tool that simplifies the management of Python dependencies and virtual environments for your projects. It combines the functionality of pip and venv into one seamless workflow, making it easier to create isolated environments and manage project dependencies.
Key Features of Pipenv

    Dependency Management:
        Automatically creates and manages a Pipfile for tracking dependencies (similar to package.json in Node.js).
        Allows you to specify exact versions or version ranges of packages.

    Virtual Environment Management:
        Automatically creates and manages virtual environments for each project.
        Keeps your global Python environment clean.

    Locking Dependencies:
        Generates a Pipfile.lock file to ensure the same versions are installed across different environments or team members.

    Ease of Use:
        Combines installing, uninstalling, and virtual environment activation into simple commands.

How to Use Pipenv
1. Install Pipenv

pip install pipenv

2. Create a New Project Environment

Navigate to your project directory and run:

pipenv install

This creates a Pipfile and sets up a virtual environment.
3. Install a Specific Version of a Package

To install requests==2.20.0, run:

pipenv install requests==2.20.0

Pipenv updates the Pipfile with the dependency and its version. It also generates a Pipfile.lock for reproducibility.
4. Activate the Virtual Environment

Use:

pipenv shell

This activates the isolated environment.
5. Check Installed Dependencies

Run:

pipenv graph

This shows all installed packages and their dependencies.
6. Uninstall a Package

To remove a package:

pipenv uninstall requests

7. Recreate an Environment from Pipfile.lock

If you share your project, teammates can recreate the exact environment using:

pipenv sync

Example Use Case

Imagine two projects:

    Project A requires requests==2.20.0.
    Project B requires requests==2.30.0.

Hereâ€™s how to handle this with Pipenv:

    For Project A:

mkdir project_a && cd project_a
pipenv install requests==2.20.0
pipenv shell

The virtual environment is created, and requests==2.20.0 is installed.

For Project B:

    mkdir project_b && cd project_b
    pipenv install requests==2.30.0
    pipenv shell

    A separate virtual environment is created with requests==2.30.0.

Why Use Pipenv Over Pip and venv?

    Streamlined Workflow: Combines dependency and virtual environment management into one tool.
    Lock File: Ensures consistent environments across machines.
    Better Dependency Resolution: Avoids conflicts by resolving dependencies before installation.

When to Use Pipenv

    When you want a single tool to handle both package and virtual environment management.
    For team projects where sharing dependencies and ensuring consistency is crucial.
    If you prefer modern dependency management tools with an easy-to-read Pipfile.

In summary, Pipenv simplifies Python development by managing dependencies and environments in a single workflow, making your life as a developer easier and more productive.